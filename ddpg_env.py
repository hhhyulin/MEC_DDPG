import csv
import math
import random
import numpy as np
from simulateRealEnv import *

# -------------------------- #
# environment
# -------------------------- #
# 全局变量
M = 20  # 移动设备数量
N = 7  # 模型数量
S = 3  # 边缘服务器数量

# T = 200  # 周期200s
# slots = 5  # 每个时隙5s
# slot_num = int(T / slots)  # 40个时隙

# -------------------------- #
# model
# -------------------------- #
model_name = ["ResNet34", "ResNet50", "ResNet101", "ResNet152", "VGG11", "VGG13", "VGG16"]  # 模型名字

model_size = [83.28613186, 97.79685879, 170.5429068, 230.4920187, 506.8408499, 507.5460196, 527.8030233]  # 模型大小

model_num = len(Raspberry().get_instance().get_solo_time())  # 模型数量7--实例化Raspberry类得到solo_time的列表长度

# 在edge的推理时间
inference_time_edge = [0.00904020357131958, 0.011850108623504638, 0.019543111324310303,
                       0.029253121852874757, 0.006320668697357178, 0.006898420333862305, 0.009620986461639404]

workload = [3.671, 4.111, 7.833, 11.558, 7.616, 11.320, 15.483]  # G flops 模型计算量

# xxx
interface = [0.004923200425313544, 0.005820645389037619, 0.00626463663519147, 0.006376227712114536,
             0.006415996596729947, 0.007335975865960702, 0.006857571519806857]
solo_time = [0.004117003146006036, 0.006029463234467019, 0.013278474689118833, 0.02287689414076022,
             -9.532789937276905e-05, -0.0004375555320983975, 0.0027634149418325465]
loading_time_edge = [0.0819, 0.1030, 0.1942, 0.2884, 0.4053, 0.3705, 0.3832]

# local
# interference_loc = [0.3402885344293384, 0.8103660172886319, 1.1495774613486396, 1.7088506221771242,
#                     2.406694934103224, 2.551536374621921, 3.150218531820509]  xxx
interference_loc = [4.345708990097046, 2.752386140823364, 3.9813384771347047, 3.993636071681976,
                    3.056140387058258, 3.262002551555633, 3.3621537923812865]

# 560
action_cache = [[[7, 7, 7], [7, 7, 7], [7, 7]], [[0, 1, 2], [3, 4, 5], [6, 7]], [[0, 1, 2], [3, 4, 6], [5, 7]],
                [[0, 1, 2], [3, 4, 7], [5, 6]], [[0, 1, 2], [3, 5, 6], [4, 7]], [[0, 1, 2], [3, 5, 7], [4, 6]],
                [[0, 1, 2], [3, 6, 7], [4, 5]], [[0, 1, 2], [4, 5, 6], [3, 7]], [[0, 1, 2], [4, 5, 7], [3, 6]],
                [[0, 1, 2], [4, 6, 7], [3, 5]], [[0, 1, 2], [5, 6, 7], [3, 4]], [[0, 1, 3], [2, 4, 5], [6, 7]],
                [[0, 1, 3], [2, 4, 6], [5, 7]], [[0, 1, 3], [2, 4, 7], [5, 6]], [[0, 1, 3], [2, 5, 6], [4, 7]],
                [[0, 1, 3], [2, 5, 7], [4, 6]], [[0, 1, 3], [2, 6, 7], [4, 5]], [[0, 1, 3], [4, 5, 6], [2, 7]],
                [[0, 1, 3], [4, 5, 7], [2, 6]], [[0, 1, 3], [4, 6, 7], [2, 5]], [[0, 1, 3], [5, 6, 7], [2, 4]],
                [[0, 1, 4], [2, 3, 5], [6, 7]], [[0, 1, 4], [2, 3, 6], [5, 7]], [[0, 1, 4], [2, 3, 7], [5, 6]],
                [[0, 1, 4], [2, 5, 6], [3, 7]], [[0, 1, 4], [2, 5, 7], [3, 6]], [[0, 1, 4], [2, 6, 7], [3, 5]],
                [[0, 1, 4], [3, 5, 6], [2, 7]], [[0, 1, 4], [3, 5, 7], [2, 6]], [[0, 1, 4], [3, 6, 7], [2, 5]],
                [[0, 1, 4], [5, 6, 7], [2, 3]], [[0, 1, 5], [2, 3, 4], [6, 7]], [[0, 1, 5], [2, 3, 6], [4, 7]],
                [[0, 1, 5], [2, 3, 7], [4, 6]], [[0, 1, 5], [2, 4, 6], [3, 7]], [[0, 1, 5], [2, 4, 7], [3, 6]],
                [[0, 1, 5], [2, 6, 7], [3, 4]], [[0, 1, 5], [3, 4, 6], [2, 7]], [[0, 1, 5], [3, 4, 7], [2, 6]],
                [[0, 1, 5], [3, 6, 7], [2, 4]], [[0, 1, 5], [4, 6, 7], [2, 3]], [[0, 1, 6], [2, 3, 4], [5, 7]],
                [[0, 1, 6], [2, 3, 5], [4, 7]], [[0, 1, 6], [2, 3, 7], [4, 5]], [[0, 1, 6], [2, 4, 5], [3, 7]],
                [[0, 1, 6], [2, 4, 7], [3, 5]], [[0, 1, 6], [2, 5, 7], [3, 4]], [[0, 1, 6], [3, 4, 5], [2, 7]],
                [[0, 1, 6], [3, 4, 7], [2, 5]], [[0, 1, 6], [3, 5, 7], [2, 4]], [[0, 1, 6], [4, 5, 7], [2, 3]],
                [[0, 1, 7], [2, 3, 4], [5, 6]], [[0, 1, 7], [2, 3, 5], [4, 6]], [[0, 1, 7], [2, 3, 6], [4, 5]],
                [[0, 1, 7], [2, 4, 5], [3, 6]], [[0, 1, 7], [2, 4, 6], [3, 5]], [[0, 1, 7], [2, 5, 6], [3, 4]],
                [[0, 1, 7], [3, 4, 5], [2, 6]], [[0, 1, 7], [3, 4, 6], [2, 5]], [[0, 1, 7], [3, 5, 6], [2, 4]],
                [[0, 1, 7], [4, 5, 6], [2, 3]], [[0, 2, 3], [1, 4, 5], [6, 7]], [[0, 2, 3], [1, 4, 6], [5, 7]],
                [[0, 2, 3], [1, 4, 7], [5, 6]], [[0, 2, 3], [1, 5, 6], [4, 7]], [[0, 2, 3], [1, 5, 7], [4, 6]],
                [[0, 2, 3], [1, 6, 7], [4, 5]], [[0, 2, 3], [4, 5, 6], [1, 7]], [[0, 2, 3], [4, 5, 7], [1, 6]],
                [[0, 2, 3], [4, 6, 7], [1, 5]], [[0, 2, 3], [5, 6, 7], [1, 4]], [[0, 2, 4], [1, 3, 5], [6, 7]],
                [[0, 2, 4], [1, 3, 6], [5, 7]], [[0, 2, 4], [1, 3, 7], [5, 6]], [[0, 2, 4], [1, 5, 6], [3, 7]],
                [[0, 2, 4], [1, 5, 7], [3, 6]], [[0, 2, 4], [1, 6, 7], [3, 5]], [[0, 2, 4], [3, 5, 6], [1, 7]],
                [[0, 2, 4], [3, 5, 7], [1, 6]], [[0, 2, 4], [3, 6, 7], [1, 5]], [[0, 2, 4], [5, 6, 7], [1, 3]],
                [[0, 2, 5], [1, 3, 4], [6, 7]], [[0, 2, 5], [1, 3, 6], [4, 7]], [[0, 2, 5], [1, 3, 7], [4, 6]],
                [[0, 2, 5], [1, 4, 6], [3, 7]], [[0, 2, 5], [1, 4, 7], [3, 6]], [[0, 2, 5], [1, 6, 7], [3, 4]],
                [[0, 2, 5], [3, 4, 6], [1, 7]], [[0, 2, 5], [3, 4, 7], [1, 6]], [[0, 2, 5], [3, 6, 7], [1, 4]],
                [[0, 2, 5], [4, 6, 7], [1, 3]], [[0, 2, 6], [1, 3, 4], [5, 7]], [[0, 2, 6], [1, 3, 5], [4, 7]],
                [[0, 2, 6], [1, 3, 7], [4, 5]], [[0, 2, 6], [1, 4, 5], [3, 7]], [[0, 2, 6], [1, 4, 7], [3, 5]],
                [[0, 2, 6], [1, 5, 7], [3, 4]], [[0, 2, 6], [3, 4, 5], [1, 7]], [[0, 2, 6], [3, 4, 7], [1, 5]],
                [[0, 2, 6], [3, 5, 7], [1, 4]], [[0, 2, 6], [4, 5, 7], [1, 3]], [[0, 2, 7], [1, 3, 4], [5, 6]],
                [[0, 2, 7], [1, 3, 5], [4, 6]], [[0, 2, 7], [1, 3, 6], [4, 5]], [[0, 2, 7], [1, 4, 5], [3, 6]],
                [[0, 2, 7], [1, 4, 6], [3, 5]], [[0, 2, 7], [1, 5, 6], [3, 4]], [[0, 2, 7], [3, 4, 5], [1, 6]],
                [[0, 2, 7], [3, 4, 6], [1, 5]], [[0, 2, 7], [3, 5, 6], [1, 4]], [[0, 2, 7], [4, 5, 6], [1, 3]],
                [[0, 3, 4], [1, 2, 5], [6, 7]], [[0, 3, 4], [1, 2, 6], [5, 7]], [[0, 3, 4], [1, 2, 7], [5, 6]],
                [[0, 3, 4], [1, 5, 6], [2, 7]], [[0, 3, 4], [1, 5, 7], [2, 6]], [[0, 3, 4], [1, 6, 7], [2, 5]],
                [[0, 3, 4], [2, 5, 6], [1, 7]], [[0, 3, 4], [2, 5, 7], [1, 6]], [[0, 3, 4], [2, 6, 7], [1, 5]],
                [[0, 3, 4], [5, 6, 7], [1, 2]], [[0, 3, 5], [1, 2, 4], [6, 7]], [[0, 3, 5], [1, 2, 6], [4, 7]],
                [[0, 3, 5], [1, 2, 7], [4, 6]], [[0, 3, 5], [1, 4, 6], [2, 7]], [[0, 3, 5], [1, 4, 7], [2, 6]],
                [[0, 3, 5], [1, 6, 7], [2, 4]], [[0, 3, 5], [2, 4, 6], [1, 7]], [[0, 3, 5], [2, 4, 7], [1, 6]],
                [[0, 3, 5], [2, 6, 7], [1, 4]], [[0, 3, 5], [4, 6, 7], [1, 2]], [[0, 3, 6], [1, 2, 4], [5, 7]],
                [[0, 3, 6], [1, 2, 5], [4, 7]], [[0, 3, 6], [1, 2, 7], [4, 5]], [[0, 3, 6], [1, 4, 5], [2, 7]],
                [[0, 3, 6], [1, 4, 7], [2, 5]], [[0, 3, 6], [1, 5, 7], [2, 4]], [[0, 3, 6], [2, 4, 5], [1, 7]],
                [[0, 3, 6], [2, 4, 7], [1, 5]], [[0, 3, 6], [2, 5, 7], [1, 4]], [[0, 3, 6], [4, 5, 7], [1, 2]],
                [[0, 3, 7], [1, 2, 4], [5, 6]], [[0, 3, 7], [1, 2, 5], [4, 6]], [[0, 3, 7], [1, 2, 6], [4, 5]],
                [[0, 3, 7], [1, 4, 5], [2, 6]], [[0, 3, 7], [1, 4, 6], [2, 5]], [[0, 3, 7], [1, 5, 6], [2, 4]],
                [[0, 3, 7], [2, 4, 5], [1, 6]], [[0, 3, 7], [2, 4, 6], [1, 5]], [[0, 3, 7], [2, 5, 6], [1, 4]],
                [[0, 3, 7], [4, 5, 6], [1, 2]], [[0, 4, 5], [1, 2, 3], [6, 7]], [[0, 4, 5], [1, 2, 6], [3, 7]],
                [[0, 4, 5], [1, 2, 7], [3, 6]], [[0, 4, 5], [1, 3, 6], [2, 7]], [[0, 4, 5], [1, 3, 7], [2, 6]],
                [[0, 4, 5], [1, 6, 7], [2, 3]], [[0, 4, 5], [2, 3, 6], [1, 7]], [[0, 4, 5], [2, 3, 7], [1, 6]],
                [[0, 4, 5], [2, 6, 7], [1, 3]], [[0, 4, 5], [3, 6, 7], [1, 2]], [[0, 4, 6], [1, 2, 3], [5, 7]],
                [[0, 4, 6], [1, 2, 5], [3, 7]], [[0, 4, 6], [1, 2, 7], [3, 5]], [[0, 4, 6], [1, 3, 5], [2, 7]],
                [[0, 4, 6], [1, 3, 7], [2, 5]], [[0, 4, 6], [1, 5, 7], [2, 3]], [[0, 4, 6], [2, 3, 5], [1, 7]],
                [[0, 4, 6], [2, 3, 7], [1, 5]], [[0, 4, 6], [2, 5, 7], [1, 3]], [[0, 4, 6], [3, 5, 7], [1, 2]],
                [[0, 4, 7], [1, 2, 3], [5, 6]], [[0, 4, 7], [1, 2, 5], [3, 6]], [[0, 4, 7], [1, 2, 6], [3, 5]],
                [[0, 4, 7], [1, 3, 5], [2, 6]], [[0, 4, 7], [1, 3, 6], [2, 5]], [[0, 4, 7], [1, 5, 6], [2, 3]],
                [[0, 4, 7], [2, 3, 5], [1, 6]], [[0, 4, 7], [2, 3, 6], [1, 5]], [[0, 4, 7], [2, 5, 6], [1, 3]],
                [[0, 4, 7], [3, 5, 6], [1, 2]], [[0, 5, 6], [1, 2, 3], [4, 7]], [[0, 5, 6], [1, 2, 4], [3, 7]],
                [[0, 5, 6], [1, 2, 7], [3, 4]], [[0, 5, 6], [1, 3, 4], [2, 7]], [[0, 5, 6], [1, 3, 7], [2, 4]],
                [[0, 5, 6], [1, 4, 7], [2, 3]], [[0, 5, 6], [2, 3, 4], [1, 7]], [[0, 5, 6], [2, 3, 7], [1, 4]],
                [[0, 5, 6], [2, 4, 7], [1, 3]], [[0, 5, 6], [3, 4, 7], [1, 2]], [[0, 5, 7], [1, 2, 3], [4, 6]],
                [[0, 5, 7], [1, 2, 4], [3, 6]], [[0, 5, 7], [1, 2, 6], [3, 4]], [[0, 5, 7], [1, 3, 4], [2, 6]],
                [[0, 5, 7], [1, 3, 6], [2, 4]], [[0, 5, 7], [1, 4, 6], [2, 3]], [[0, 5, 7], [2, 3, 4], [1, 6]],
                [[0, 5, 7], [2, 3, 6], [1, 4]], [[0, 5, 7], [2, 4, 6], [1, 3]], [[0, 5, 7], [3, 4, 6], [1, 2]],
                [[0, 6, 7], [1, 2, 3], [4, 5]], [[0, 6, 7], [1, 2, 4], [3, 5]], [[0, 6, 7], [1, 2, 5], [3, 4]],
                [[0, 6, 7], [1, 3, 4], [2, 5]], [[0, 6, 7], [1, 3, 5], [2, 4]], [[0, 6, 7], [1, 4, 5], [2, 3]],
                [[0, 6, 7], [2, 3, 4], [1, 5]], [[0, 6, 7], [2, 3, 5], [1, 4]], [[0, 6, 7], [2, 4, 5], [1, 3]],
                [[0, 6, 7], [3, 4, 5], [1, 2]], [[1, 2, 3], [0, 4, 5], [6, 7]], [[1, 2, 3], [0, 4, 6], [5, 7]],
                [[1, 2, 3], [0, 4, 7], [5, 6]], [[1, 2, 3], [0, 5, 6], [4, 7]], [[1, 2, 3], [0, 5, 7], [4, 6]],
                [[1, 2, 3], [0, 6, 7], [4, 5]], [[1, 2, 3], [4, 5, 6], [0, 7]], [[1, 2, 3], [4, 5, 7], [0, 6]],
                [[1, 2, 3], [4, 6, 7], [0, 5]], [[1, 2, 3], [5, 6, 7], [0, 4]], [[1, 2, 4], [0, 3, 5], [6, 7]],
                [[1, 2, 4], [0, 3, 6], [5, 7]], [[1, 2, 4], [0, 3, 7], [5, 6]], [[1, 2, 4], [0, 5, 6], [3, 7]],
                [[1, 2, 4], [0, 5, 7], [3, 6]], [[1, 2, 4], [0, 6, 7], [3, 5]], [[1, 2, 4], [3, 5, 6], [0, 7]],
                [[1, 2, 4], [3, 5, 7], [0, 6]], [[1, 2, 4], [3, 6, 7], [0, 5]], [[1, 2, 4], [5, 6, 7], [0, 3]],
                [[1, 2, 5], [0, 3, 4], [6, 7]], [[1, 2, 5], [0, 3, 6], [4, 7]], [[1, 2, 5], [0, 3, 7], [4, 6]],
                [[1, 2, 5], [0, 4, 6], [3, 7]], [[1, 2, 5], [0, 4, 7], [3, 6]], [[1, 2, 5], [0, 6, 7], [3, 4]],
                [[1, 2, 5], [3, 4, 6], [0, 7]], [[1, 2, 5], [3, 4, 7], [0, 6]], [[1, 2, 5], [3, 6, 7], [0, 4]],
                [[1, 2, 5], [4, 6, 7], [0, 3]], [[1, 2, 6], [0, 3, 4], [5, 7]], [[1, 2, 6], [0, 3, 5], [4, 7]],
                [[1, 2, 6], [0, 3, 7], [4, 5]], [[1, 2, 6], [0, 4, 5], [3, 7]], [[1, 2, 6], [0, 4, 7], [3, 5]],
                [[1, 2, 6], [0, 5, 7], [3, 4]], [[1, 2, 6], [3, 4, 5], [0, 7]], [[1, 2, 6], [3, 4, 7], [0, 5]],
                [[1, 2, 6], [3, 5, 7], [0, 4]], [[1, 2, 6], [4, 5, 7], [0, 3]], [[1, 2, 7], [0, 3, 4], [5, 6]],
                [[1, 2, 7], [0, 3, 5], [4, 6]], [[1, 2, 7], [0, 3, 6], [4, 5]], [[1, 2, 7], [0, 4, 5], [3, 6]],
                [[1, 2, 7], [0, 4, 6], [3, 5]], [[1, 2, 7], [0, 5, 6], [3, 4]], [[1, 2, 7], [3, 4, 5], [0, 6]],
                [[1, 2, 7], [3, 4, 6], [0, 5]], [[1, 2, 7], [3, 5, 6], [0, 4]], [[1, 2, 7], [4, 5, 6], [0, 3]],
                [[1, 3, 4], [0, 2, 5], [6, 7]], [[1, 3, 4], [0, 2, 6], [5, 7]], [[1, 3, 4], [0, 2, 7], [5, 6]],
                [[1, 3, 4], [0, 5, 6], [2, 7]], [[1, 3, 4], [0, 5, 7], [2, 6]], [[1, 3, 4], [0, 6, 7], [2, 5]],
                [[1, 3, 4], [2, 5, 6], [0, 7]], [[1, 3, 4], [2, 5, 7], [0, 6]], [[1, 3, 4], [2, 6, 7], [0, 5]],
                [[1, 3, 4], [5, 6, 7], [0, 2]], [[1, 3, 5], [0, 2, 4], [6, 7]], [[1, 3, 5], [0, 2, 6], [4, 7]],
                [[1, 3, 5], [0, 2, 7], [4, 6]], [[1, 3, 5], [0, 4, 6], [2, 7]], [[1, 3, 5], [0, 4, 7], [2, 6]],
                [[1, 3, 5], [0, 6, 7], [2, 4]], [[1, 3, 5], [2, 4, 6], [0, 7]], [[1, 3, 5], [2, 4, 7], [0, 6]],
                [[1, 3, 5], [2, 6, 7], [0, 4]], [[1, 3, 5], [4, 6, 7], [0, 2]], [[1, 3, 6], [0, 2, 4], [5, 7]],
                [[1, 3, 6], [0, 2, 5], [4, 7]], [[1, 3, 6], [0, 2, 7], [4, 5]], [[1, 3, 6], [0, 4, 5], [2, 7]],
                [[1, 3, 6], [0, 4, 7], [2, 5]], [[1, 3, 6], [0, 5, 7], [2, 4]], [[1, 3, 6], [2, 4, 5], [0, 7]],
                [[1, 3, 6], [2, 4, 7], [0, 5]], [[1, 3, 6], [2, 5, 7], [0, 4]], [[1, 3, 6], [4, 5, 7], [0, 2]],
                [[1, 3, 7], [0, 2, 4], [5, 6]], [[1, 3, 7], [0, 2, 5], [4, 6]], [[1, 3, 7], [0, 2, 6], [4, 5]],
                [[1, 3, 7], [0, 4, 5], [2, 6]], [[1, 3, 7], [0, 4, 6], [2, 5]], [[1, 3, 7], [0, 5, 6], [2, 4]],
                [[1, 3, 7], [2, 4, 5], [0, 6]], [[1, 3, 7], [2, 4, 6], [0, 5]], [[1, 3, 7], [2, 5, 6], [0, 4]],
                [[1, 3, 7], [4, 5, 6], [0, 2]], [[1, 4, 5], [0, 2, 3], [6, 7]], [[1, 4, 5], [0, 2, 6], [3, 7]],
                [[1, 4, 5], [0, 2, 7], [3, 6]], [[1, 4, 5], [0, 3, 6], [2, 7]], [[1, 4, 5], [0, 3, 7], [2, 6]],
                [[1, 4, 5], [0, 6, 7], [2, 3]], [[1, 4, 5], [2, 3, 6], [0, 7]], [[1, 4, 5], [2, 3, 7], [0, 6]],
                [[1, 4, 5], [2, 6, 7], [0, 3]], [[1, 4, 5], [3, 6, 7], [0, 2]], [[1, 4, 6], [0, 2, 3], [5, 7]],
                [[1, 4, 6], [0, 2, 5], [3, 7]], [[1, 4, 6], [0, 2, 7], [3, 5]], [[1, 4, 6], [0, 3, 5], [2, 7]],
                [[1, 4, 6], [0, 3, 7], [2, 5]], [[1, 4, 6], [0, 5, 7], [2, 3]], [[1, 4, 6], [2, 3, 5], [0, 7]],
                [[1, 4, 6], [2, 3, 7], [0, 5]], [[1, 4, 6], [2, 5, 7], [0, 3]], [[1, 4, 6], [3, 5, 7], [0, 2]],
                [[1, 4, 7], [0, 2, 3], [5, 6]], [[1, 4, 7], [0, 2, 5], [3, 6]], [[1, 4, 7], [0, 2, 6], [3, 5]],
                [[1, 4, 7], [0, 3, 5], [2, 6]], [[1, 4, 7], [0, 3, 6], [2, 5]], [[1, 4, 7], [0, 5, 6], [2, 3]],
                [[1, 4, 7], [2, 3, 5], [0, 6]], [[1, 4, 7], [2, 3, 6], [0, 5]], [[1, 4, 7], [2, 5, 6], [0, 3]],
                [[1, 4, 7], [3, 5, 6], [0, 2]], [[1, 5, 6], [0, 2, 3], [4, 7]], [[1, 5, 6], [0, 2, 4], [3, 7]],
                [[1, 5, 6], [0, 2, 7], [3, 4]], [[1, 5, 6], [0, 3, 4], [2, 7]], [[1, 5, 6], [0, 3, 7], [2, 4]],
                [[1, 5, 6], [0, 4, 7], [2, 3]], [[1, 5, 6], [2, 3, 4], [0, 7]], [[1, 5, 6], [2, 3, 7], [0, 4]],
                [[1, 5, 6], [2, 4, 7], [0, 3]], [[1, 5, 6], [3, 4, 7], [0, 2]], [[1, 5, 7], [0, 2, 3], [4, 6]],
                [[1, 5, 7], [0, 2, 4], [3, 6]], [[1, 5, 7], [0, 2, 6], [3, 4]], [[1, 5, 7], [0, 3, 4], [2, 6]],
                [[1, 5, 7], [0, 3, 6], [2, 4]], [[1, 5, 7], [0, 4, 6], [2, 3]], [[1, 5, 7], [2, 3, 4], [0, 6]],
                [[1, 5, 7], [2, 3, 6], [0, 4]], [[1, 5, 7], [2, 4, 6], [0, 3]], [[1, 5, 7], [3, 4, 6], [0, 2]],
                [[1, 6, 7], [0, 2, 3], [4, 5]], [[1, 6, 7], [0, 2, 4], [3, 5]], [[1, 6, 7], [0, 2, 5], [3, 4]],
                [[1, 6, 7], [0, 3, 4], [2, 5]], [[1, 6, 7], [0, 3, 5], [2, 4]], [[1, 6, 7], [0, 4, 5], [2, 3]],
                [[1, 6, 7], [2, 3, 4], [0, 5]], [[1, 6, 7], [2, 3, 5], [0, 4]], [[1, 6, 7], [2, 4, 5], [0, 3]],
                [[1, 6, 7], [3, 4, 5], [0, 2]], [[2, 3, 4], [0, 1, 5], [6, 7]], [[2, 3, 4], [0, 1, 6], [5, 7]],
                [[2, 3, 4], [0, 1, 7], [5, 6]], [[2, 3, 4], [0, 5, 6], [1, 7]], [[2, 3, 4], [0, 5, 7], [1, 6]],
                [[2, 3, 4], [0, 6, 7], [1, 5]], [[2, 3, 4], [1, 5, 6], [0, 7]], [[2, 3, 4], [1, 5, 7], [0, 6]],
                [[2, 3, 4], [1, 6, 7], [0, 5]], [[2, 3, 4], [5, 6, 7], [0, 1]], [[2, 3, 5], [0, 1, 4], [6, 7]],
                [[2, 3, 5], [0, 1, 6], [4, 7]], [[2, 3, 5], [0, 1, 7], [4, 6]], [[2, 3, 5], [0, 4, 6], [1, 7]],
                [[2, 3, 5], [0, 4, 7], [1, 6]], [[2, 3, 5], [0, 6, 7], [1, 4]], [[2, 3, 5], [1, 4, 6], [0, 7]],
                [[2, 3, 5], [1, 4, 7], [0, 6]], [[2, 3, 5], [1, 6, 7], [0, 4]], [[2, 3, 5], [4, 6, 7], [0, 1]],
                [[2, 3, 6], [0, 1, 4], [5, 7]], [[2, 3, 6], [0, 1, 5], [4, 7]], [[2, 3, 6], [0, 1, 7], [4, 5]],
                [[2, 3, 6], [0, 4, 5], [1, 7]], [[2, 3, 6], [0, 4, 7], [1, 5]], [[2, 3, 6], [0, 5, 7], [1, 4]],
                [[2, 3, 6], [1, 4, 5], [0, 7]], [[2, 3, 6], [1, 4, 7], [0, 5]], [[2, 3, 6], [1, 5, 7], [0, 4]],
                [[2, 3, 6], [4, 5, 7], [0, 1]], [[2, 3, 7], [0, 1, 4], [5, 6]], [[2, 3, 7], [0, 1, 5], [4, 6]],
                [[2, 3, 7], [0, 1, 6], [4, 5]], [[2, 3, 7], [0, 4, 5], [1, 6]], [[2, 3, 7], [0, 4, 6], [1, 5]],
                [[2, 3, 7], [0, 5, 6], [1, 4]], [[2, 3, 7], [1, 4, 5], [0, 6]], [[2, 3, 7], [1, 4, 6], [0, 5]],
                [[2, 3, 7], [1, 5, 6], [0, 4]], [[2, 3, 7], [4, 5, 6], [0, 1]], [[2, 4, 5], [0, 1, 3], [6, 7]],
                [[2, 4, 5], [0, 1, 6], [3, 7]], [[2, 4, 5], [0, 1, 7], [3, 6]], [[2, 4, 5], [0, 3, 6], [1, 7]],
                [[2, 4, 5], [0, 3, 7], [1, 6]], [[2, 4, 5], [0, 6, 7], [1, 3]], [[2, 4, 5], [1, 3, 6], [0, 7]],
                [[2, 4, 5], [1, 3, 7], [0, 6]], [[2, 4, 5], [1, 6, 7], [0, 3]], [[2, 4, 5], [3, 6, 7], [0, 1]],
                [[2, 4, 6], [0, 1, 3], [5, 7]], [[2, 4, 6], [0, 1, 5], [3, 7]], [[2, 4, 6], [0, 1, 7], [3, 5]],
                [[2, 4, 6], [0, 3, 5], [1, 7]], [[2, 4, 6], [0, 3, 7], [1, 5]], [[2, 4, 6], [0, 5, 7], [1, 3]],
                [[2, 4, 6], [1, 3, 5], [0, 7]], [[2, 4, 6], [1, 3, 7], [0, 5]], [[2, 4, 6], [1, 5, 7], [0, 3]],
                [[2, 4, 6], [3, 5, 7], [0, 1]], [[2, 4, 7], [0, 1, 3], [5, 6]], [[2, 4, 7], [0, 1, 5], [3, 6]],
                [[2, 4, 7], [0, 1, 6], [3, 5]], [[2, 4, 7], [0, 3, 5], [1, 6]], [[2, 4, 7], [0, 3, 6], [1, 5]],
                [[2, 4, 7], [0, 5, 6], [1, 3]], [[2, 4, 7], [1, 3, 5], [0, 6]], [[2, 4, 7], [1, 3, 6], [0, 5]],
                [[2, 4, 7], [1, 5, 6], [0, 3]], [[2, 4, 7], [3, 5, 6], [0, 1]], [[2, 5, 6], [0, 1, 3], [4, 7]],
                [[2, 5, 6], [0, 1, 4], [3, 7]], [[2, 5, 6], [0, 1, 7], [3, 4]], [[2, 5, 6], [0, 3, 4], [1, 7]],
                [[2, 5, 6], [0, 3, 7], [1, 4]], [[2, 5, 6], [0, 4, 7], [1, 3]], [[2, 5, 6], [1, 3, 4], [0, 7]],
                [[2, 5, 6], [1, 3, 7], [0, 4]], [[2, 5, 6], [1, 4, 7], [0, 3]], [[2, 5, 6], [3, 4, 7], [0, 1]],
                [[2, 5, 7], [0, 1, 3], [4, 6]], [[2, 5, 7], [0, 1, 4], [3, 6]], [[2, 5, 7], [0, 1, 6], [3, 4]],
                [[2, 5, 7], [0, 3, 4], [1, 6]], [[2, 5, 7], [0, 3, 6], [1, 4]], [[2, 5, 7], [0, 4, 6], [1, 3]],
                [[2, 5, 7], [1, 3, 4], [0, 6]], [[2, 5, 7], [1, 3, 6], [0, 4]], [[2, 5, 7], [1, 4, 6], [0, 3]],
                [[2, 5, 7], [3, 4, 6], [0, 1]], [[2, 6, 7], [0, 1, 3], [4, 5]], [[2, 6, 7], [0, 1, 4], [3, 5]],
                [[2, 6, 7], [0, 1, 5], [3, 4]], [[2, 6, 7], [0, 3, 4], [1, 5]], [[2, 6, 7], [0, 3, 5], [1, 4]],
                [[2, 6, 7], [0, 4, 5], [1, 3]], [[2, 6, 7], [1, 3, 4], [0, 5]], [[2, 6, 7], [1, 3, 5], [0, 4]],
                [[2, 6, 7], [1, 4, 5], [0, 3]], [[2, 6, 7], [3, 4, 5], [0, 1]], [[3, 4, 5], [0, 1, 2], [6, 7]],
                [[3, 4, 5], [0, 1, 6], [2, 7]], [[3, 4, 5], [0, 1, 7], [2, 6]], [[3, 4, 5], [0, 2, 6], [1, 7]],
                [[3, 4, 5], [0, 2, 7], [1, 6]], [[3, 4, 5], [0, 6, 7], [1, 2]], [[3, 4, 5], [1, 2, 6], [0, 7]],
                [[3, 4, 5], [1, 2, 7], [0, 6]], [[3, 4, 5], [1, 6, 7], [0, 2]], [[3, 4, 5], [2, 6, 7], [0, 1]],
                [[3, 4, 6], [0, 1, 2], [5, 7]], [[3, 4, 6], [0, 1, 5], [2, 7]], [[3, 4, 6], [0, 1, 7], [2, 5]],
                [[3, 4, 6], [0, 2, 5], [1, 7]], [[3, 4, 6], [0, 2, 7], [1, 5]], [[3, 4, 6], [0, 5, 7], [1, 2]],
                [[3, 4, 6], [1, 2, 5], [0, 7]], [[3, 4, 6], [1, 2, 7], [0, 5]], [[3, 4, 6], [1, 5, 7], [0, 2]],
                [[3, 4, 6], [2, 5, 7], [0, 1]], [[3, 4, 7], [0, 1, 2], [5, 6]], [[3, 4, 7], [0, 1, 5], [2, 6]],
                [[3, 4, 7], [0, 1, 6], [2, 5]], [[3, 4, 7], [0, 2, 5], [1, 6]], [[3, 4, 7], [0, 2, 6], [1, 5]],
                [[3, 4, 7], [0, 5, 6], [1, 2]], [[3, 4, 7], [1, 2, 5], [0, 6]], [[3, 4, 7], [1, 2, 6], [0, 5]],
                [[3, 4, 7], [1, 5, 6], [0, 2]], [[3, 4, 7], [2, 5, 6], [0, 1]], [[3, 5, 6], [0, 1, 2], [4, 7]],
                [[3, 5, 6], [0, 1, 4], [2, 7]], [[3, 5, 6], [0, 1, 7], [2, 4]], [[3, 5, 6], [0, 2, 4], [1, 7]],
                [[3, 5, 6], [0, 2, 7], [1, 4]], [[3, 5, 6], [0, 4, 7], [1, 2]], [[3, 5, 6], [1, 2, 4], [0, 7]],
                [[3, 5, 6], [1, 2, 7], [0, 4]], [[3, 5, 6], [1, 4, 7], [0, 2]], [[3, 5, 6], [2, 4, 7], [0, 1]],
                [[3, 5, 7], [0, 1, 2], [4, 6]], [[3, 5, 7], [0, 1, 4], [2, 6]], [[3, 5, 7], [0, 1, 6], [2, 4]],
                [[3, 5, 7], [0, 2, 4], [1, 6]], [[3, 5, 7], [0, 2, 6], [1, 4]], [[3, 5, 7], [0, 4, 6], [1, 2]],
                [[3, 5, 7], [1, 2, 4], [0, 6]], [[3, 5, 7], [1, 2, 6], [0, 4]], [[3, 5, 7], [1, 4, 6], [0, 2]],
                [[3, 5, 7], [2, 4, 6], [0, 1]], [[3, 6, 7], [0, 1, 2], [4, 5]], [[3, 6, 7], [0, 1, 4], [2, 5]],
                [[3, 6, 7], [0, 1, 5], [2, 4]], [[3, 6, 7], [0, 2, 4], [1, 5]], [[3, 6, 7], [0, 2, 5], [1, 4]],
                [[3, 6, 7], [0, 4, 5], [1, 2]], [[3, 6, 7], [1, 2, 4], [0, 5]], [[3, 6, 7], [1, 2, 5], [0, 4]],
                [[3, 6, 7], [1, 4, 5], [0, 2]], [[3, 6, 7], [2, 4, 5], [0, 1]], [[4, 5, 6], [0, 1, 2], [3, 7]],
                [[4, 5, 6], [0, 1, 3], [2, 7]], [[4, 5, 6], [0, 1, 7], [2, 3]], [[4, 5, 6], [0, 2, 3], [1, 7]],
                [[4, 5, 6], [0, 2, 7], [1, 3]], [[4, 5, 6], [0, 3, 7], [1, 2]], [[4, 5, 6], [1, 2, 3], [0, 7]],
                [[4, 5, 6], [1, 2, 7], [0, 3]], [[4, 5, 6], [1, 3, 7], [0, 2]], [[4, 5, 6], [2, 3, 7], [0, 1]],
                [[4, 5, 7], [0, 1, 2], [3, 6]], [[4, 5, 7], [0, 1, 3], [2, 6]], [[4, 5, 7], [0, 1, 6], [2, 3]],
                [[4, 5, 7], [0, 2, 3], [1, 6]], [[4, 5, 7], [0, 2, 6], [1, 3]], [[4, 5, 7], [0, 3, 6], [1, 2]],
                [[4, 5, 7], [1, 2, 3], [0, 6]], [[4, 5, 7], [1, 2, 6], [0, 3]], [[4, 5, 7], [1, 3, 6], [0, 2]],
                [[4, 5, 7], [2, 3, 6], [0, 1]], [[4, 6, 7], [0, 1, 2], [3, 5]], [[4, 6, 7], [0, 1, 3], [2, 5]],
                [[4, 6, 7], [0, 1, 5], [2, 3]], [[4, 6, 7], [0, 2, 3], [1, 5]], [[4, 6, 7], [0, 2, 5], [1, 3]],
                [[4, 6, 7], [0, 3, 5], [1, 2]], [[4, 6, 7], [1, 2, 3], [0, 5]], [[4, 6, 7], [1, 2, 5], [0, 3]],
                [[4, 6, 7], [1, 3, 5], [0, 2]], [[4, 6, 7], [2, 3, 5], [0, 1]], [[5, 6, 7], [0, 1, 2], [3, 4]],
                [[5, 6, 7], [0, 1, 3], [2, 4]], [[5, 6, 7], [0, 1, 4], [2, 3]], [[5, 6, 7], [0, 2, 3], [1, 4]],
                [[5, 6, 7], [0, 2, 4], [1, 3]], [[5, 6, 7], [0, 3, 4], [1, 2]], [[5, 6, 7], [1, 2, 3], [0, 4]],
                [[5, 6, 7], [1, 2, 4], [0, 3]], [[5, 6, 7], [1, 3, 4], [0, 2]], [[5, 6, 7], [2, 3, 4], [0, 1]]]
# 增加全不缓存的选择 -- [[7, 7, 7], [7, 7, 7], [7, 7]]，动作空间由560变561
# action_space = np.array(np.arange((3 ** 7) * 560))
action_space = np.array(np.arange(3 ** 7))
n_actions = len(action_space)


class DDPGEnv(object):
    # 类变量
    # M = 20  # 移动设备数量
    M = M
    N = 7  # 模型数量
    S = 3  # 边缘服务器数量

    # s_dim = (5 * M) + (2 * S) + (N * S)  # 状态维度127
    s_dim = 127   # 52 77 102 127 152(mobile num)
    # a_dim = S * 2 + N  # 动作维度13
    action_dim = S * 3 + M
    action_bound = [-1, 1]  # 对用tanh激活函数

    # action_space = np.array(np.arange((3 ** 7) * 561))  # 按照上面action_cache索引  4^7=16384
    # action_space = np.array(np.arange((3 ** 7) * 561))  # 按照上面action_cache索引  3^7=2187
    action_space = np.array(np.arange(3 ** 7))
    n_actions = len(action_space)

    r_n = [83.28613186, 97.79685879, 170.5429068, 230.4920187, 506.8408499, 507.5460196, 527.8030233]  # 模型占用内存容量
    c_n = [3.671, 4.111, 7.833, 11.558, 7.616, 11.320, 15.483]  # 模型所需计算资源
    wire_trans_latency = 0.011921  # 有线传输时间

    simu_trans = Trans()

    with open("train_data.txt", "r", encoding="utf-8") as f:
        lines = f.readlines()
    U_m = np.array(list(map(int, lines[2].split(',')))[:M])  # connect edge
    D_m = np.array(list(map(float, lines[5].split(',')))[:M])  # distance
    local_model = np.array(list(map(int, lines[8].split(',')))[:M])  # place model
    edges_idx = np.array(list(map(int, lines[47].split(','))))

    connect_num = [0 for _ in range(S)]  # 每个服务器连接设备数量

    # edges_idx = get_all_edge_idx(S)  # 边缘服务器类型：0/1
    T_loading_s = np.zeros((S, N))
    T_solo_s = np.zeros((S, N))
    T_interference_s = np.zeros((S, N))
    for i in range(S):
        T_loading_s[i, :] = get_edge_device(edges_idx[i]).get_loading_time()
        T_solo_s[i, :] = get_edge_device(edges_idx[i]).get_solo_time()
        T_interference_s[i, :] = get_edge_device(edges_idx[i]).get_solo_time()

    rou_s_n = 0.05 + 0.05 * np.random.rand(S, N)  # 边缘服务器对于每个模型的平均排队时间
    T_extra = 0.3 + 0.2 * np.random.rand(S, M)  # 资源等待时间
    # U_m = np.random.randint(1, S + 1, size=[M])  # 移动设备连接的服务器（从0开始）
    # D_m = 20 + 30 * np.random.rand(M)  # 用户和边缘服务器距离
    trans_power = np.full(M, math.pow(10, 2.7) / 1000)  # 发射功率
    datasize = np.full(M, 224 * 224 * 3)  # 数据大小
    G_m = np.zeros(M)
    for i in range(M):
        G_m[i] = math.pow(D_m[i], -4) * 1 ** 2

    # local_model = np.random.randint(0, N, size=[M])  # 本地缓存的模型
    cached_model = np.array([[0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0]])  # 已缓存模型x，设置初始每个人服务器只缓存两个模型
    # C_s = (np.random.randint(20, 50, size=[S, 1])).tolist()  # 初始边缘服务器计算资源
    R_s = None
    C_s = None
    C_s_start = None

    B_s = np.full((S, 1), 15 * math.pow(10, 6))  # 边缘服务器带宽资源

    task_list = None
    task_latency = None
    # task_list = np.random.randint(0, N, size=[M])  # 更新任务列表 0~N-1 -- 请求模型类型
    # task_latency = np.random.uniform(2, 2.1, size=[M])  # 时延
    # task_latency = np.full(M, 2)
    B_m = [0 for _ in range(M)]  # 资源分配

    caching = {i: [] for i in range(S)}  # 记录决定缓存且能缓存的模型
    caching_remain_t = {i: [] for i in range(S)}  # 缓存完成剩余时间

    time_delay = []  # 请求处理延迟（用于计算吞吐量）

    reward_list = np.zeros((1, M)).astype('float64')  # 奖励列表

    th_last = 0  # 上一轮吞吐量
    th_batch_time = 0

    update_action = 1

    csv_reader = list(csv.reader(open("task_list.csv")))

    def __init__(self, cfg):
        # ------------state-------------- #
        # cached_model, caching resource, computing resource,
        # task type, task max_latency, distance, connection, bandwidth
        self.start_state = np.append(self.cached_model, self.R_s)
        self.start_state = np.append(self.start_state, self.local_model)
        self.start_state = np.append(self.start_state, self.C_s)
        self.start_state = np.append(self.start_state, self.task_list)
        # self.start_state = np.append(self.start_state, self.task_latency)
        self.start_state = np.append(self.start_state, self.D_m)
        self.start_state = np.append(self.start_state, self.U_m)
        self.start_state = np.append(self.start_state, self.B_m)
        self.state = self.start_state
        self.cfg = cfg

    # 环境重置后获得state
    def reset(self):
        self.gen_task(0)  # 每轮开始，第0个时隙
        self.reset_env1()
        self.reset_env2()
        return self._get_obs()

    # 和环境交互后可以用来获得state
    def _get_obs(self):
        self.state = np.append(self.cached_model, self.R_s)
        self.state = np.append(self.state, self.local_model)
        self.state = np.append(self.state, self.C_s)
        self.state = np.append(self.state, self.task_list)
        # self.state = np.append(self.state, self.task_latency)
        self.state = np.append(self.state, self.D_m)
        self.state = np.append(self.state, self.U_m)
        self.state = np.append(self.state, self.B_m)
        return self.state

    def gen_task(self, t):  # 第t个时隙的任务及时延
        MAX_LATENCY = self.cfg['MAX_LATENCY']
        self.task_list = list(map(int, self.csv_reader[t]))  # [:self.M]
        self.task_latency = np.full(self.M, MAX_LATENCY)
        # self.task_list = np.random.randint(0, self.N, size=[self.M, 1])  # 更新任务列表 0~N-1 -- 请求模型类型
        # self.task_latency = np.random.uniform(2, 2.1, (self.M, 1))  # 时延
        # self.task_latency = np.full(self.M, 2)

    def get_bandwidth_mean(self):
        self.connect_num = [0 for _ in range(S)]  # 每个服务器连接设备数量
        # 根据连接情况平均分配值，后续增加从带宽分配算法获取的带宽值
        for mobile in range(self.M):
            for edge in range(self.S):
                if self.U_m[mobile] == edge:  # 服务器索引序号+1
                    self.connect_num[edge] += 1
        self.B_m = [0 for _ in range(self.M)]
        for mobile in range(self.M):
            i = int(self.U_m[mobile])
            self.B_m[mobile] = self.B_s[i] / self.connect_num[i]

    def modify_bandwidth(self):
        self.B_m = [0 for _ in range(self.M)]
        for mobile in range(self.M):
            i = int(self.U_m[mobile])
            # print(self.connect_num)
            if self.connect_num[i] != 0:
                self.B_m[mobile] = self.B_s[i] / self.connect_num[i]
            else:
                pass

    # 外层算法在每个slot改变的state
    def reset_env1(self):
        with open("train_data.txt", "r", encoding="utf-8") as f:
            lines = f.readlines()
        self.R_s = np.array(list(map(float, lines[44].split(','))))  # storage resources
        self.C_s = np.array(list(map(float, lines[26].split(','))))  # computing resources每step开始时恢复
        # R_s = np.random.uniform(800, 1200, size=[S])  # 初始边缘服务器内存容量  最少能保存一个模型，最多能保存5个模型
        # C_s = np.random.uniform(20, 50, size=[S])  # 初始边缘服务器计算资源
        self.C_s_start = self.C_s.copy()
        # self.B_s = np.full((S, 1), 15 * math.pow(10, 6))  # 边缘服务器带宽资源
        # self.local_model = np.random.randint(0, N - 1, size=[M])  # 本地缓存的模型
        self.cached_model = [[0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0]]  # 已缓存模型x
        # self.U_m = np.random.randint(1, self.S + 1, size=[self.M])
        # self.D_m = 20 + 30 * np.random.rand(M, 1)  # 用户和边缘服务器距离

    # DRL每次训练都会改变的：带宽分配
    def reset_env2(self):
        self.get_bandwidth_mean()

    # 每个step执行完用户请求后将计算资源恢复到该轮开始是的大小
    def reset_env3(self):
        with open("train_data.txt", "r", encoding="utf-8") as f:
            lines = f.readlines()
        self.C_s = np.array(list(map(float, lines[26].split(','))))  # computing resources每step开始时恢复
        self.C_s_start = self.C_s.copy()

    def get_transrate(self):
        transrate = np.zeros((self.M, 1))
        for j in range(M):
            transrate[j] = self.simu_trans.bandwidth2rate(self.B_m[j])
        return transrate

    def get_transtime(self, transrate):
        transtime = np.full((self.M, self.S), 100000.00000000)
        for j in range(self.M):
            for i in range(self.S):
                if transrate[j] > 0:
                    transtime[j][i] = 158.62574521935713 / transrate[j] + 0.0036795665703229976
                    if self.U_m[j] != i + 1:  # 如果移动设备j在服务器s的连接范围内
                        transtime[j][i] += self.wire_trans_latency
        return transtime

    def get_com_time(self, transtime, mobile, batch_size, offload_act):
        ii = int(self.task_list[mobile])  # 任务类型--第i类型的任务由offload_ac[i]确定卸载位置
        jj = offload_act[ii]
        time_total = transtime[mobile][jj] + (self.T_interference_s[jj][ii] * batch_size[jj][ii]) + \
                    self.rou_s_n[jj][ii] + self.T_extra[jj][mobile]
        # time_total = transtime[mobile][jj] + self.T_interference_s[jj][ii] + self.rou_s_n[jj][ii] + \
        #              self.T_extra[jj][mobile]
        # print("batch_size[ii]: ", batch_size[ii])
        # print("time_total: ", time_total)
        return time_total

    def step(self, action, slot):  # 0~S-1: 缓存决策x   S~S+M-1: 卸载决策y
        # action = (action + 1) / 2
        # print("action: ", action)
        self.reward_list = np.zeros((1, M)).astype('float32')  # 奖励列表
        total_reward = 0  # 奖励统计
        total_throughput = 0  # 吞吐量统计

        caching_act = [round(action[i] * self.N) for i in range(self.S * 3)]  # .reshape(self.S, self.N)
        offload_act = [round(action[self.S * 3 + i] * self.S) for i in range(self.M)]
        # print("caching_act: ", caching_act)
        # print("offload_act: ", offload_act)
        # offload_act = [self.S, self.S, self.S, self.S, self.S, self.S, self.S]  # 默认local
        # cache = self.cache_list[slot]
        # caching_act = self.action_cache[cache]

        """
            缓存动作判断：
            1. 如果模型没被缓存且资源足够--缓存
            2. 如果模型已缓存或超出范围--不缓存
            3. 如果资源不足--不缓存
        """
        for edge in range(self.S):
            for j in range(3):
                i = caching_act[j+(edge*3)]
                if i >= self.N or i < 0:  # 超出模型编号范围
                    pass
                elif self.cached_model[edge][i] == 1 and i in self.caching[edge]:  # 如果模型已缓存或者正在缓存
                    pass
                elif self.cached_model[edge][i] == 0 and self.R_s[edge] >= self.r_n[i]:  # 未缓存且内存资源足够
                    self.caching[edge].append(i)  # 加入计划缓存列表
                    temp = self.T_loading_s[edge][i]  # 服务器edge加载模型i所需时间
                    self.caching_remain_t[edge].append(temp)

                    self.R_s[edge] -= self.r_n[i]
                else:  # ----------增加一个模型从内存置换出去
                    pass

        """
            卸载动作判断：（改变传输时间/总时间/吞吐量/reward）
            1. 模型本地处理
            2. 模型卸载的边缘服务器处理（已缓存、正缓存、需要有线传输时间、不需要有线传输时间）
            3. 模型不处理
        """
        batch_size = np.zeros((self.S, self.N))  # 每个服务器每种模型的批处理数量
        batch_time = {i: 0 for i in range(M)}
        # time_total = {i: [10000] for i in range()}
        for mobile in range(self.M):
            i = int(self.task_list[mobile])  # 任务类型--第i类型的任务由offload_ac[i]确定卸载位置
            j = offload_act[i]  # 服务器：0 ~ S-1
            if j > self.S or j < 0:
                batch_time[mobile] = 10
            elif 0 <= j < self.S:
                if self.cached_model[j][i] == 1 and self.C_s[j] >= self.c_n[i]:  # 服务器已缓存模型,有足够计算资源
                    batch_size[j][i] += 1  # 批大小加1
                    self.C_s[j] -= self.c_n[i]
                else:
                    connect_edge = self.U_m[mobile]
                    self.connect_num[connect_edge] -= 1
                    if self.local_model[mobile] == i:
                        batch_time[mobile] = interference_loc[i]
                    else:
                        batch_time[mobile] = 10
            elif j == self.S and self.local_model[mobile] == i:  # 本地处理
                batch_time[mobile] = interference_loc[i]
            else:
                batch_time[mobile] = 10

        self.modify_bandwidth()
        transrate = self.get_transrate()
        transtime = self.get_transtime(transrate)

        for mobile in range(self.M):
            if batch_time[mobile] == 0:
                batch_time[mobile] = self.get_com_time(transtime, mobile, batch_size, offload_act)
            if batch_time[mobile] <= self.task_latency[mobile]:
                total_throughput += 1
                # total_reward += (self.task_latency[mobile]-batch_time[mobile])
            else:
                pass

        # print("cached model_s: ", self.cached_model)
        for edge in range(self.S):
            m = 0
            for i in range(len(self.caching[edge])):
                self.caching_remain_t[edge][m] -= 0.5  # 减去slots长度，暂时设置为0.5s
                # print("caching_remain_t[edge][m]: ", self.caching_remain_t[edge][m])
                if self.caching_remain_t[edge][m] <= 0:  # 如果剩余时间小于等于0，即在当前时隙加载完
                    j = self.caching[edge][m]
                    self.cached_model[edge][j] = 1  # 加入已缓存列表
                    self.caching[edge].remove(self.caching[edge][m])
                    self.caching_remain_t[edge].remove(self.caching_remain_t[edge][m])
                else:
                    m += 1
        # print("cached model_end: ", self.cached_model)
            # print(f"count: %d, update_action: %d" %(count, self.update_action))

        # total_reward = total_throughput
        # total_reward = -(sum(batch_time.values()) - self.th_batch_time)
        total_reward = (total_throughput + self.th_last)/2
        # total_reward = total_throughput - 20
        self.th_last = total_throughput
        self.th_batch_time = sum(batch_time.values())

        # self.throughput.append(total_throughput)

        self.reset_env2()  # 重置带宽
        self.reset_env3()  # 重置计算资源
        self.gen_task(slot + 1)  # 重置任务
        self._get_obs()  # 获得新state

        return self._get_obs(), total_reward
